<?php
/**
 * Script to generate modal windows
 *
 * @version	2022.04.03
 * @author  Aiden Fox
 * @link    https://github.com/AidenF0X
 * @license	GNU/GPL http://www.gnu.org/licenses/gpl.html
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 */
if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
}
 
	class modalConstructor extends init {

		private $modalElements = array('mdlAdress', 'mdlTitle', 'mdlDesc', 'mdlContent');
		private $allowedModals = array();
		private $modalContents = '';
		private $tplBase = '/modalComponent.tpl';
		private $allModals;
		private $mdlOut;

		function __construct($modalFileDir, $modalsArray, $UserArray) {
			
			if($UserArray['user_group']) {
				$this->setBaseContent();
				
				//Getting all found modals + their options
				foreach($modalsArray as $key) {
					$modalTemplateContents = $this->getModalContent($modalFileDir, $key);
					$this->allModals[$key] = $this->getModalOptions($modalTemplateContents);
					$this->allModals[$key]['mdlContent'] = $modalTemplateContents;	
					$this->groupCheck($UserArray["user_group"], $this->allModals[$key]["groupToShow"], $key);  //Selcting allowed modals
				}

				//Selected modals for current user
				foreach($this->allowedModals as $filteredName){
					foreach($this->modalElements as $modalElement) {
						$currentValue = $this->allModals[$filteredName][$modalElement];
						$currentElement = "{".$modalElement."}";
						if($currentValue) {
							$this->modalContents = str_replace($currentElement, $currentValue, $this->modalContents);
						}
					}
					$this->mdlOut[] = $this->modalContents;
					$this->setBaseContent();
				}
			}
		}
		
		private function groupCheck($userGroup = 5, $modalGroup, $modalName) {
			switch(is_array($modalGroup)){
				case false:
					if($userGroup === $modalGroup){
							$this->allowedModals[] = $modalName;
					}
				break;
						
				case true:
					if(in_array($userGroup, $modalGroup)) {
						$this->allowedModals[] = $modalName;
					}
				break;
			}
		}
		
		private function getModalOptions($modalContents) {
				$optionsArray = functions::getStrBetween($modalContents, "<mdlOpt>","</mdlOpt>")[0];
				$decodedOptions = json_decode($optionsArray, true);
				
				return $decodedOptions;
		}
		
		private function getModalContent($path, $modalFile) {
			$modalTemplateContents = file::efile($path.$modalFile)["content"];
			
			return $modalTemplateContents;
		}
		
		private function setBaseContent() {
			global $config;
			$this->modalContents = file::efile(ROOT_DIR."/templates/".$config['siteTpl'].'/components/'.$this->tplBase)["content"];
		}

		public function mdlOut(){
			return $this->mdlOut;
		}	
	}