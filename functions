<?php
if (!defined('FOXXEY')) {
	die ('{"message": "Not in FOXXEY thread"}');
}
	class functions {
		
	private static $filterSymbols = array ("\x22", "\x60", "\t", '\n', '\r', "\n", "\r", '\\', ",", "/", "¬", "#", ";", ":", "~", "[", "]", "{", "}", ")", "(", "*", "^", "%", "$", "<", ">", "?", "!", '"', "'", " ", "&", '"' );
		
	public static function collectData($data, $captchaCheck = false){
	$collectedData = array();
	if(is_array($data)){
			foreach($data as $key => $value){
				if($captchaCheck) {
					if(strpos($key, 'captcha') !== false){
						if($value === "null"){
							self::jsonAnswer("enter.captcha", true);
						}
					}
				}

				if(strpos($key, 'acceptForm') !== false) {
						if($value == null){
							self::jsonAnswer("Accept checkbox!", true);
						}
				}
				$collectedData[$key] = self::filterString($value);
			}
		}
		return $collectedData;
	}
	
	public static function getStrBetween($string, $start, $end)	{
		$result = array();
		$string = " ".$string;
		$offset = 0;
		while(true)
		{
			$ini = strpos($string,$start,$offset);
			if ($ini == 0)
				break;
			$ini += strlen($start);
			$len = strpos($string,$end,$ini) - $ini;
			$result[] = substr($string,$ini,$len);
			$offset = $ini+$len;
		}
		return $result;
	}

	public static function filterString($input){
		global $config; 
		return trim(str_replace(self::$filterSymbols,'',strip_tags(stripslashes($input))));
	}
		
	public static function getUserData($login, $data, $db){
		global $config;
		$query = "SELECT ".$data." FROM users WHERE login = '$login'";
		$selectedValue = $db->getValue($query);
		return $selectedValue;
	}
		
	public static function checkExistingData($db, $data, $order){
		$query = "SELECT * FROM users WHERE ".$data." = '".$order."'";
		$status = $db->getValue($query);
		return $status;
	}
		
	public static function checkSA($array){
		foreach($array as $key => $value){
			if(preg_match("/[А-Яа-я]/", $value)) {
				self::jsonAnswer('text.badSym.'.$key, true);
			}
		}
	}
		
	public static function FoxesStrlen($value, $charset = "utf-8"){
		if (strtolower($charset) == "utf-8") {
			if (function_exists('mb_strlen')) {
				return mb_strlen($value, "utf-8");
			} elseif (function_exists('iconv_strlen')) {
				return iconv_strlen($value, "utf-8");
			}
		}

		return strlen($value);
	}
		
	function FoxesStrrpos($str, $needle, $charset){
		if (strtolower($charset) == "utf-8") {
			if (function_exists('mb_strrpos')) {
				return mb_strrpos($str, $needle, null, "utf-8");
			} elseif (function_exists('iconv_strrpos')) {
				return iconv_strrpos($str, $needle, "utf-8");
			}
		}

		return strrpos($str, $needle);

	}
		
	public static function totranslit($var, $lower = true, $punkt = true){
			global $langtranslit;

			if (is_array($var)) return "";

			$var = str_replace(chr(0) , '', $var);

			if (!is_array($langtranslit) or !count($langtranslit)){
				$var = trim(strip_tags($var));

				if ($punkt) $var = preg_replace("/[^a-z0-9\_\-.]+/mi", "", $var);
				else $var = preg_replace("/[^a-z0-9\_\-]+/mi", "", $var);

				$var = preg_replace('#[.]+#i', '.', $var);
				$var = str_ireplace(".php", ".ppp", $var);

				if ($lower) $var = strtolower($var);

				return $var;
			}

			$var = trim(strip_tags($var));
			$var = preg_replace("/\s+/ms", "-", $var);
			$var = str_replace("/", "-", $var);

			$var = strtr($var, $langtranslit);

			if ($punkt) $var = preg_replace("/[^a-z0-9\_\-.]+/mi", "", $var);
			else $var = preg_replace("/[^a-z0-9\_\-]+/mi", "", $var);

			$var = preg_replace('#[\-]+#i', '-', $var);
			$var = preg_replace('#[.]+#i', '.', $var);

			if ($lower) $var = strtolower($var);

			$var = str_ireplace(".php", "", $var);
			$var = str_ireplace(".php", ".ppp", $var);

			if (strlen($var) > 200){
				$var = substr($var, 0, 200);
				if (($temp_max = strrpos($var, '-'))) $var = substr($var, 0, $temp_max);
			}

			return $var;
		}
			
		public static function translit($value){
			if(preg_match("/[А-Яа-я]/", $value)) {
				$converter = array(
					'а' => 'a',    'б' => 'b',    'в' => 'v',    'г' => 'g',    'д' => 'd',
					'е' => 'e',    'ё' => 'e',    'ж' => 'zh',   'з' => 'z',    'и' => 'i',
					'й' => 'y',    'к' => 'k',    'л' => 'l',    'м' => 'm',    'н' => 'n',
					'о' => 'o',    'п' => 'p',    'р' => 'r',    'с' => 's',    'т' => 't',
					'у' => 'u',    'ф' => 'f',    'х' => 'h',    'ц' => 'c',    'ч' => 'ch',
					'ш' => 'sh',   'щ' => 'sch',  'ь' => '',     'ы' => 'y',    'ъ' => '',
					'э' => 'e',    'ю' => 'yu',   'я' => 'ya',
				 
					'А' => 'A',    'Б' => 'B',    'В' => 'V',    'Г' => 'G',    'Д' => 'D',
					'Е' => 'E',    'Ё' => 'E',    'Ж' => 'Zh',   'З' => 'Z',    'И' => 'I',
					'Й' => 'Y',    'К' => 'K',    'Л' => 'L',    'М' => 'M',    'Н' => 'N',
					'О' => 'O',    'П' => 'P',    'Р' => 'R',    'С' => 'S',    'Т' => 'T',
					'У' => 'U',    'Ф' => 'F',    'Х' => 'H',    'Ц' => 'C',    'Ч' => 'Ch',
					'Ш' => 'Sh',   'Щ' => 'Sch',  'Ь' => '',     'Ы' => 'Y',    'Ъ' => '',
					'Э' => 'E',    'Ю' => 'Yu',   'Я' => 'Ya',
				);
				$value = strtr($value, $converter);
			}
			return $value;
		}
			
		public static function jsonAnswer($answer, $status = true){
			$type = 'error';
			$response = '';
			switch($status){
				case true:
					$type = 'error';
				break;
				
				case false:
					$type = 'success';
				break;

			}
			$response = '{"message": "'.$answer.'", "type": "'.$type.'"}';			
			die($response);
		}
	
	}